
Group: Chao Pan, Kevin Einstein, Thomas Tucker, Spencer Woo


1. System call handling and multiprogramming

This was implemented by modifying addrspace.cc/h. We modified addrspace to allow multiple processes via AddrSpace::Initialize(OpenFile *executable). This employed our memmanage.c/h which is used to track the allocated and free physical page numbers via bitmap.h. Memmanage was made thread safe with internal locks and acquiring/releasing.Instead of creating page table at starting at pageframe 0, we create the page table starting at the page table that is requested from the memory manager. To zero out all allocated memory it zeroes out pages at a time instead of all of the machine memory. Then we load the code and data onto the memory according to the pages. To let the application run without taking up memory, we freed the page to delete the memory footprint of the application.
This is tested with the provided array.c.

2. Exec and Exit

  Implemented in the exception.cc file. Added to the ExceptionHandler method. When a user program is executed it forks a new thread and initializes the address space. If exit is called, then it clears the address space, sets the exit status, and finishes the thread.
This was tested with the provided exittest.c and exectest.c.

4. Read and Write console system calls

This was implemented by creating and implementing a "SynchConsole" class which provides the abstraction for sychronous access to the console.

5. Handle User Program exceptions

This is to allow the Nachos kernel to handle user program exceptions, including system calls. Essentially this is to make it so the user can never crash the kernel with commands. Other exceptions were added as else if statements in ExceptionHandler, included a debug message, and called a Destroy function which ended the thread.

Summary
Everyone contributed to the project. Kevin and Thomas worked on part 1, Thomas worked on part 2, Spencer and Chao part 4, Spencer and Chao part 5, tests for each part written by those working on that part.

