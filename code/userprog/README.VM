
Group: Chao Pan, Kevin Einstein, Thomas Tucker, Spencer Woo


1. Implement Demand Paging
   For demand paging, we made all page table entries invalid. Then we made the
   pagefault exception in exception.cc call our new method
   Addrspace::demandpage to handle all pagefaults. In the method, we decided
   whether or not the page fault was on the code, data, or stack of the
   executable file. Then we assigned virtual memory to the file pages
   according to the type. After success, we set the PTEs to valid and restarted
   execution without incrementing PC.

2. Demand paging with page replacement
  For Part 2 we made a backingstore class to evict pages when physical memory
  is full. Then page-in the page that we want.
  An unfortunate fact is that the BackingStore does not delete its old files.
  This is programmed to occur when the BackingStore's destructor is called,
  which occurs when the AddrSpace's destructor is called, which is occurs when
  the Thread's destructor is called, although this does not appear to happen.

3. Testing
  We wrote tests that exceeded the physical memory, and used arrays to simulate
  good locality, bad locality, and randomn locality. Our implementation had
  prints and debugs to allow tracing through these tests and confirm if the
  implementation passes.

4. Counters of page faults
  To maintain counters of page faults we added counters to machine/stats.h and
  printed them in stats.cc. 

5. LRU 
  Our implementation of #2 uses LRU. In order to complete this portion of the
  assignment, we added the '-b' flag to remove checks on the 'use' bit, thus
  creating a cyclic page replacement algorithm that isn't quite FIFO.
  Note that this information was taken using four physical pages in order to
  bring about as many page faults as possible. 

  Program   PageFaults  PageOuts    PageIns
  halt      3           0           2
  halt(b)   3           0           2
  array     17          6           16
  array(b)  23          9           22
  somemem   199         91          196
  somemem(b)149         60          146
  matmult   58093       17607       58055
  matmult(b)58536       17627       58498

  Bringing the page count up to 8, we see some nice locality with the matmult
  test:
  Program   PageFaults  PageOuts    PageIns
  matmult   6264        318         6226
  matmult(b)7857        882         7819

Summary
  Everyone contributed to the project. Everyone worked on part 1 and 2, Spencer
  and Chao worked on part 3,  Kevin and Thomas worked on part 4, Thomas worked
  on part 5. 

